# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: 1.0.$(Rev:r)
trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: LITTLENUNNASPIZZA_AWS_CDK
  - name: npm_config_cache_app
    value: $(Pipeline.Workspace)/app/.npm
  - name: npm_config_cache_cdk
    value: $(Pipeline.Workspace)/cdk/.npm

stages:
  - stage: Build
    displayName: Build ui, api and cdk
    jobs:
      - job: Build
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core sdk"
            inputs:
              packageType: sdk
              version: 8.x
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: dotnet publish --configuration "Release" /p:GenerateRuntimeConfigurationFiles=true /p:AssemblyVersion=$(Build.BuildNumber) --runtime linux-x64 --self-contained false
            displayName: "Build .net api"
            workingDirectory: src/api/src/WebUI

          - script: dotnet --version > ../app/src/versions/dotnet-version.txt
            displayName: "Get .NET version"
            workingDirectory: src/api

          - task: NodeTool@0
            inputs:
              versionSpec: "20.x"
            displayName: "Install NodeJS v20"
          - task: Cache@2
            inputs:
              key: "src/app/package-lock.json"
              path: $(npm_config_cache_app)
            displayName: Cache UI NPM packages
          - script: npm ci --cache $(npm_config_cache_app)
            workingDirectory: src/app
            displayName: "Install npm modules"

          - script: npm run build
            displayName: "Build UI"
            workingDirectory: src/app

          - task: Cache@2
            inputs:
              key: "src/cdk/package-lock.json"
              path: $(npm_config_cache_cdk)
            displayName: Cache CDK NPM packages
          - script: npm ci --cache $(npm_config_cache_cdk)
            displayName: install npm modules for cdk
            workingDirectory: src/cdk

          - script: npm run cdk synth -- --context cloudfront-certificate-identifier=$(CDK_CLOUD_FRONT_CERTIFICATE_IDENTIFIER) --context hosted-zone-id=$(CDK_HOSTED_ZONE_ID)
            displayName: cdk synth
            workingDirectory: src/cdk

          # if from pull request, get commit id
          - script: |
              if [ -n "$(System.PullRequest.PullRequestId)" ]; then
                echo "##vso[task.setvariable variable=COMMIT_ID]$(Build.SourceVersion)";
              fi
            displayName: "Get commit id"
            condition: and(succeeded(), ne(variables['System.PullRequest.PullRequestId'], ''))
            workingDirectory: src/cdk

          - publish: $(System.DefaultWorkingDirectory)/src/cdk/cdk.out
            artifact: build
